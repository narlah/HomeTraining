package interviewPickings.codeFights;


import java.util.LinkedList;
import java.util.ListIterator;

public class ChallengeTextDisplay {

    public static void main(String[] args) {

        // the output should be textDisplay(keycodes) = "nice and simple".
        int[] keycodes = new int[]{78, 73, 67, 69, 32, 65, 78, 68, 32, 83, 73, 77, 80, 76, 69};
        //, the output should be textDisplay(keycodes) = "hey, you did it"
        int[] keycodes2 = new int[]{72, 69, 89, 32, 89, 79, 85, 32, 68, 73, 68, 32, 73, 84, 32, 87, 82, 79, 78, 71, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 188, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 46, 46, 8, 8, 46, 46, 8};
        int[] keycodes3 = new int[]{72, 69, 89, 188, 32, 65, 37, 72, 39, 86, 69, 32, 65, 32, 78, 73, 67, 69, 32, 84, 73, 77, 69};
        //cool
        int[] keycodes4 = new int[]{69, 65, 190, 190, 32, 51, 69, 48, 78, 54, 190, 69, 88, 39, 65, 49, 55, 86, 87, 46, 186, 53, 69, 53, 54, 86, 36, 46, 75, 49, 8, 77, 190, 86, 190, 56, 80, 188, 37, 68, 56, 55, 83, 55, 88, 36, 72, 8, 186, 49, 86, 51, 73, 68, 75, 75, 190, 78, 79, 75, 90, 49, 190, 190, 89, 90, 67, 85, 32, 36, 68, 37, 53, 222, 88, 53, 52, 67, 46, 78, 67, 86, 49, 37, 89, 85, 81, 80, 82, 67, 65, 73, 84, 46, 50, 51, 54, 71, 188, 67, 37, 84, 37, 77, 35, 74, 188, 71, 57, 81, 222, 190, 55, 76, 90, 71, 51, 50, 52, 76, 46, 8, 52, 8, 80, 54, 71, 55, 78, 35, 36, 66, 55, 68, 86, 73, 56, 68, 72, 70, 8, 73, 35, 83, 71, 69, 75, 188, 51, 69, 69, 82, 77, 79, 49, 37, 77, 50, 39, 90, 48, 46, 74, 65, 82, 80, 65, 90, 49, 79, 190, 8, 71, 68, 222, 85, 186, 39, 8, 87, 35, 36, 222, 71, 53, 75, 83, 65, 79, 81, 69, 54, 53, 71, 86, 82, 66, 49, 83, 8, 83, 222, 53, 69, 77, 50, 48, 72, 79, 48, 89, 186, 78, 85, 78, 48, 70, 186, 68, 56, 82, 66, 69, 78, 70, 32, 89, 68, 79, 89, 35, 85, 65, 85, 51, 69, 77, 68, 186, 88, 51, 55, 79, 72, 70, 65, 8, 90, 77, 55, 68, 222, 190, 74, 68, 55, 37, 72, 90, 52, 86, 51, 85, 86, 48, 66, 39, 50, 51, 86, 73, 82, 69, 90, 87, 78, 75, 36, 70, 67, 50, 52, 76, 50, 48, 72, 67, 86, 50, 77, 222, 36, 188, 50, 86, 75, 36, 37, 36, 82, 90, 68, 73, 51, 48, 86, 37, 55, 71, 88, 72, 79, 73, 73, 90, 57, 55, 50, 186, 85, 32, 48, 51, 36, 186, 57, 39, 77, 88, 57, 48, 48, 190, 51, 72, 55, 88, 188, 81, 32, 190, 39, 222, 76, 32, 80, 49, 65, 186, 84, 39, 190, 76, 65, 57, 80, 188, 188, 75, 186, 78, 85, 186, 71, 69, 66, 53, 83, 39, 56, 46, 69, 71, 53, 89, 71, 48, 72, 37, 188, 78, 81, 50, 55, 55, 46, 89, 80, 8, 82, 36, 83, 87, 222, 70, 86, 32, 55, 85, 51, 55, 77, 190, 72, 51, 89, 83, 88, 90, 88, 78, 67, 84, 186, 77, 50, 90, 188, 76, 48, 85, 186, 50, 48, 222, 39, 89, 54, 84, 81, 84, 222, 71, 222, 66, 73, 186, 68, 88, 79, 186, 79, 49, 83, 57, 72, 190, 39, 8, 80, 57, 72, 55, 32, 35, 56, 70, 53, 74, 85, 36, 57, 39, 83, 71, 188, 66, 87, 57, 74, 68, 54, 85, 49, 79, 53, 82, 90, 72, 70, 32, 222, 69, 68, 84, 54, 74, 190, 69, 186, 89, 77, 89, 71, 67, 46, 73, 66, 85, 8, 75, 72, 69, 67, 89, 39, 80, 57, 85, 76, 76, 222, 85, 69, 188, 83, 86, 67, 84, 67, 186, 76, 77, 78, 89, 87, 35, 82, 66, 36, 81, 88, 76, 84, 85, 56, 90, 52, 71, 48, 85, 55, 71, 68, 222, 66, 77, 222, 65, 51, 32, 83, 54, 55, 87, 65, 90, 48, 35, 57, 81, 50, 65, 83, 188, 54, 51, 74, 67, 79, 70, 57, 65, 37, 57, 81, 76, 36, 65, 74, 190, 188, 76, 222, 65, 81, 56, 66, 32, 85, 71, 75, 52, 56, 37, 222, 53, 39, 76, 81, 35, 35, 85, 48, 32, 190, 188, 86, 49, 71, 78, 72, 88, 51, 88, 79, 53, 66, 222, 68, 82, 85, 49, 79, 186, 53, 73, 186, 49, 37, 46, 190, 85, 82, 50, 49, 75, 190, 75, 69, 83, 32, 80, 52, 36, 75, 68, 89, 66, 82, 8, 190, 52, 85, 73, 46, 68, 37, 86, 71, 79, 190, 39, 83, 222, 90, 77, 8, 37, 84, 57, 8, 52, 69, 83, 37, 82, 57, 190, 55, 190, 68, 87, 83, 85, 68, 83, 85, 82, 49, 68, 32, 80, 37, 78, 32, 88, 73, 79, 57, 39, 68, 39, 54, 82, 39, 56, 86, 32, 48, 68, 32, 36, 80, 71, 52, 67, 56, 90, 222, 66, 53, 68, 89, 76, 49, 69, 84, 69, 190, 52, 37, 35, 73, 190, 48, 51, 49, 87, 90, 81, 89, 52, 51, 186, 67, 67, 81, 84, 75, 81, 65, 57, 222, 77, 48, 89, 76, 70, 65, 87, 72, 68, 87, 80, 88, 87, 78, 67, 90, 32, 36, 8, 76, 48, 37, 89, 49, 71, 190, 69, 89, 84, 76, 52, 55, 66, 48, 49, 49, 82, 35, 186, 67, 77, 37, 85, 71, 186, 52, 73, 39, 53, 66, 78, 74, 90, 46, 51, 78, 188, 52, 53, 78, 88, 57, 88, 82, 32, 50, 67, 73, 82, 186, 86, 48, 65, 76, 222, 65, 88, 67, 222, 222, 56, 81, 56, 90, 73, 46, 222, 56, 37, 85, 66, 88, 32, 70, 72, 71, 65, 81, 79, 190, 78, 54, 39, 57, 69, 81, 35, 35, 86, 68, 85, 81, 70, 50, 52, 85, 79, 80, 72, 57, 188, 85, 80, 77, 87, 190, 67, 82, 50, 46, 35, 186, 48, 57, 68, 90, 52, 66, 35, 8, 36, 66, 53, 186, 87, 37, 74, 78, 70, 75, 74, 8, 188, 67, 35, 74, 86, 54, 32, 48, 65, 52, 88, 8, 56, 50, 79, 86, 188, 88, 88, 49, 84, 55, 88, 75, 85, 49, 80, 56, 222, 222, 49, 70, 78, 39, 72, 186, 35, 51, 56, 86, 70, 54, 54, 90, 86, 68, 54, 39, 82, 66, 50, 68, 87, 37, 90, 70, 56, 57, 50, 90, 39, 8, 46, 87, 85, 52, 188, 32, 8, 89, 8, 78, 56, 57, 48, 75, 67, 67, 85, 188, 78, 56, 39, 188, 79, 190, 32, 80, 86, 75, 8, 67, 56, 222};


        ChallengeTextDisplay cha = new ChallengeTextDisplay();
        System.out.println(cha.textDisplay(keycodes));
        System.out.println(cha.textDisplay(keycodes2));
        System.out.println(cha.textDisplay(keycodes3));
        System.out.println(cha.textDisplay(keycodes4));
    }


    String textDisplay(int[] keycodes) {
        LinkedList<Integer> dl = new LinkedList<>();
        int cursorIndex = 0;
        for (int i : keycodes) {
            //backspace, delete, home, end, and the left & right arrow keys, in addition to alphanumeric characters and punctuation.
            //08 bs,46 del, end 35, home 36, left arrow 	37, right arrow 	39

            switch (i) {
                case (37): {// left arr
                    if (cursorIndex > 0)
                        cursorIndex--;
                    break;
                }
                case (39): {// right
                    if (dl.size() > cursorIndex)
                        cursorIndex++;
                    break;
                }
                case (36): { // home
                    cursorIndex = 0;
                    break;
                }

                case (35): { // end
                    cursorIndex = dl.size();
                    break;
                }
                case (8): { // bs
                    if (dl.size() > 0 && cursorIndex > 0) {
                        cursorIndex--;
                        dl.remove(cursorIndex);
                    }
                    break;
                }
                case (46): {// del
                    if (dl.size() > cursorIndex)
                        dl.remove(cursorIndex);
                    break;
                }
                case (188): {// comma correction for java
                    dl.add(cursorIndex, 44);
                    cursorIndex++;
                    break;
                }
                case (222): {// single quote correction for java
                    dl.add(cursorIndex, 39);
                    cursorIndex++;
                    break;
                }
                case (190): {//. correction
                    dl.add(cursorIndex, 46);
                    cursorIndex++;
                    break;
                }
                case (186): {//; correction
                    dl.add(cursorIndex, 59);
                    cursorIndex++;
                    break;
                }
                default: {
                    dl.add(cursorIndex, i);
                    cursorIndex++;
                }

            }

        }
        StringBuilder strB = new StringBuilder(dl.size());
        ListIterator<Integer> listI = dl.listIterator();
        while (listI.hasNext()) {
            strB.append((char) listI.next().intValue());
        }
        return strB.toString().toLowerCase().replaceAll("^[^A-Za-z0-9 ,_.?:~=+();@#%^&*!\"\'/$]*$", "");
    }

}
